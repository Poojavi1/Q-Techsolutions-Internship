#main code
from flask import Flask, render_template, request, jsonify
import chess
import chess.svg

app = Flask(__name__)

# Initialize the chess board
board = chess.Board()

@app.route('/')
def index():
    board_svg = chess.svg.board(board=board)
    return render_template('index.html', board_svg=board_svg)

@app.route('/move', methods=['POST'])
def move():
    move = request.form['move'].strip()
    try:
        chess_move = board.parse_san(move)
        if board.is_legal(chess_move):
            board.push(chess_move)
            board_svg = chess.svg.board(board=board)
            return jsonify({"status": "ok", "board_svg": board_svg})
        else:
            return jsonify({"status": "invalid move"})
    except ValueError:
        return jsonify({"status": "invalid move"})

if __name__ == '__main__':
    app.run(debug=True)
#chessagent-separate file
import numpy as np
import random
import chess

class ChessAgent:
    def __init__(self):
        self.q_table = {}

    def choose_action(self, state, legal_moves):
        if state not in self.q_table:
            self.q_table[state] = np.zeros(len(legal_moves))

        if np.random.rand() < 0.1:  # Exploration
            return random.choice(list(legal_moves))
        else:  # Exploitation
            return list(legal_moves)[np.argmax(self.q_table[state])]

    def learn(self, state, action, reward, next_state, done):
        if state not in self.q_table:
            self.q_table[state] = np.zeros(len(action))
        if done:
            self.q_table[state][action] = reward
        else:
            self.q_table[state][action] += 0.1 * (reward + 0.99 * np.max(self.q_table[next_state]) - self.q_table[state][action])
#chessgamelogic-separate file
import chess
import chess.svg

class ChessGame:
    def __init__(self):
        self.board = chess.Board()

    def reset(self):
        self.board.reset()
        return self.board

    def make_move(self, move):
        try:
            self.board.push_san(move)
            return self.board
        except ValueError:
            return None

    def get_board_svg(self):
        return chess.svg.board(self.board)
